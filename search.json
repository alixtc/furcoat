[
  {
    "objectID": "notebooks/examples.html",
    "href": "notebooks/examples.html",
    "title": "Examples",
    "section": "",
    "text": "This notebook contains a few examples on how to use pelage. The idea is to illustrate what the main features with an succession of checks / transformation. We use here a simple example: the MPG dataset, loaded using the seaborn utility function."
  },
  {
    "objectID": "notebooks/examples.html#imports",
    "href": "notebooks/examples.html#imports",
    "title": "Examples",
    "section": "Imports",
    "text": "Imports\n\nimport polars as pl\nimport seaborn as sns\n\nimport pelage as plg\n\ndata = pl.DataFrame(sns.load_dataset(\"mpg\"))\ndata.head()\n\n\nshape: (5, 9)\n\n\n\nmpg\ncylinders\ndisplacement\nhorsepower\nweight\nacceleration\nmodel_year\norigin\nname\n\n\nf64\ni64\nf64\nf64\ni64\nf64\ni64\nstr\nstr\n\n\n\n\n18.0\n8\n307.0\n130.0\n3504\n12.0\n70\n\"usa\"\n\"chevrolet chev…\n\n\n15.0\n8\n350.0\n165.0\n3693\n11.5\n70\n\"usa\"\n\"buick skylark …\n\n\n18.0\n8\n318.0\n150.0\n3436\n11.0\n70\n\"usa\"\n\"plymouth satel…\n\n\n16.0\n8\n304.0\n150.0\n3433\n12.0\n70\n\"usa\"\n\"amc rebel sst\"\n\n\n17.0\n8\n302.0\n140.0\n3449\n10.5\n70\n\"usa\"\n\"ford torino\""
  },
  {
    "objectID": "notebooks/examples.html#basic-data-transformations",
    "href": "notebooks/examples.html#basic-data-transformations",
    "title": "Examples",
    "section": "Basic data transformations",
    "text": "Basic data transformations\nIn the following example, we perform some basic checks followed by a simple data transformation and finally checking for the presence of outliers.\n\naverage_mileage_per_zone = (\n    data.pipe(plg.has_no_nulls, [\"origin\", \"cylinders\", \"model_year\"])\n    .pipe(plg.accepted_range, {\"cylinders\": (3, 8)})\n    .pipe(plg.accepted_values, {\"origin\": [\"usa\", \"europe\", \"japan\"]})\n    .filter(pl.col(\"model_year\") &gt;= 80)\n    .group_by(\"origin\", \"cylinders\", \"model_year\")\n    .agg(\n        n_distinct_models=pl.col(\"name\").n_unique(),\n        avg_mpg=pl.col(\"mpg\").mean(),\n    )\n    .filter(pl.col(\"n_distinct_models\") &gt;= 3)\n    .pipe(plg.column_is_within_n_std, (\"avg_mpg\", 3))\n)\naverage_mileage_per_zone\n\n\nshape: (10, 5)\n\n\n\norigin\ncylinders\nmodel_year\nn_distinct_models\navg_mpg\n\n\nstr\ni64\ni64\nu32\nf64\n\n\n\n\n\"usa\"\n6\n81\n4\n20.925\n\n\n\"usa\"\n4\n80\n6\n27.05\n\n\n\"usa\"\n4\n82\n17\n29.647059\n\n\n\"japan\"\n4\n81\n10\n34.59\n\n\n\"japan\"\n4\n80\n11\n36.709091\n\n\n\"europe\"\n4\n81\n3\n31.866667\n\n\n\"usa\"\n6\n82\n3\n28.333333\n\n\n\"usa\"\n4\n81\n7\n30.95\n\n\n\"europe\"\n4\n80\n8\n37.4\n\n\n\"japan\"\n4\n82\n9\n34.888889"
  },
  {
    "objectID": "notebooks/examples.html#error-message",
    "href": "notebooks/examples.html#error-message",
    "title": "Examples",
    "section": "Error message",
    "text": "Error message\nWhen the check fails, a PolarsAssertError exception is raised. The error message tends to provide a summarized view of the problem that occurred during the check.\n\n(\n    data.pipe(\n        plg.accepted_range,\n        {\"displacement\": (50, 300), \"horsepower\": (50, 200)},\n    )\n)\n# Generate a PolarsAssertError\n\n\n---------------------------------------------------------------------------\nPolarsAssertError                         Traceback (most recent call last)\nCell In[13], line 2\n      1 (\n----&gt; 2     data.pipe(\n      3         plg.accepted_range,\n      4         {\"displacement\": (50, 300), \"horsepower\": (50, 200)},\n      5     )\n      6 )\n      7 # Generate a PolarsAssertError\n\nFile ~/.pyenv/versions/3.10.13/envs/FC3.10/lib/python3.10/site-packages/polars/dataframe/frame.py:5128, in DataFrame.pipe(self, function, *args, **kwargs)\n   5063 def pipe(\n   5064     self,\n   5065     function: Callable[Concatenate[DataFrame, P], T],\n   5066     *args: P.args,\n   5067     **kwargs: P.kwargs,\n   5068 ) -&gt; T:\n   5069     \"\"\"\n   5070     Offers a structured way to apply a sequence of user-defined functions (UDFs).\n   5071 \n   (...)\n   5126     └─────┴─────┘\n   5127     \"\"\"\n-&gt; 5128     return function(self, *args, **kwargs)\n\nFile ~/code/alixtc/pelage/pelage/checks.py:987, in accepted_range(data, items)\n    985 out_of_range = data.filter(pl.Expr.or_(*forbidden_ranges))\n    986 if not out_of_range.is_empty():\n--&gt; 987     raise PolarsAssertError(\n    988         out_of_range, \"Some values are beyond the acceptable ranges defined\"\n    989     )\n    990 return data\n\nPolarsAssertError: Details\nshape: (104, 9)\n┌──────┬───────────┬─────────────┬────────────┬───┬─────────────┬────────────┬────────┬────────────┐\n│ mpg  ┆ cylinders ┆ displacemen ┆ horsepower ┆ … ┆ acceleratio ┆ model_year ┆ origin ┆ name       │\n│ ---  ┆ ---       ┆ t           ┆ ---        ┆   ┆ n           ┆ ---        ┆ ---    ┆ ---        │\n│ f64  ┆ i64       ┆ ---         ┆ f64        ┆   ┆ ---         ┆ i64        ┆ str    ┆ str        │\n│      ┆           ┆ f64         ┆            ┆   ┆ f64         ┆            ┆        ┆            │\n╞══════╪═══════════╪═════════════╪════════════╪═══╪═════════════╪════════════╪════════╪════════════╡\n│ 18.0 ┆ 8         ┆ 307.0       ┆ 130.0      ┆ … ┆ 12.0        ┆ 70         ┆ usa    ┆ chevrolet  │\n│      ┆           ┆             ┆            ┆   ┆             ┆            ┆        ┆ chevelle   │\n│      ┆           ┆             ┆            ┆   ┆             ┆            ┆        ┆ malibu     │\n│ 15.0 ┆ 8         ┆ 350.0       ┆ 165.0      ┆ … ┆ 11.5        ┆ 70         ┆ usa    ┆ buick      │\n│      ┆           ┆             ┆            ┆   ┆             ┆            ┆        ┆ skylark    │\n│      ┆           ┆             ┆            ┆   ┆             ┆            ┆        ┆ 320        │\n│ 18.0 ┆ 8         ┆ 318.0       ┆ 150.0      ┆ … ┆ 11.0        ┆ 70         ┆ usa    ┆ plymouth   │\n│      ┆           ┆             ┆            ┆   ┆             ┆            ┆        ┆ satellite  │\n│ 16.0 ┆ 8         ┆ 304.0       ┆ 150.0      ┆ … ┆ 12.0        ┆ 70         ┆ usa    ┆ amc rebel  │\n│      ┆           ┆             ┆            ┆   ┆             ┆            ┆        ┆ sst        │\n│ 17.0 ┆ 8         ┆ 302.0       ┆ 140.0      ┆ … ┆ 10.5        ┆ 70         ┆ usa    ┆ ford       │\n│      ┆           ┆             ┆            ┆   ┆             ┆            ┆        ┆ torino     │\n│ …    ┆ …         ┆ …           ┆ …          ┆ … ┆ …           ┆ …          ┆ …      ┆ …          │\n│ 18.5 ┆ 8         ┆ 360.0       ┆ 150.0      ┆ … ┆ 13.0        ┆ 79         ┆ usa    ┆ chrysler   │\n│      ┆           ┆             ┆            ┆   ┆             ┆            ┆        ┆ lebaron    │\n│      ┆           ┆             ┆            ┆   ┆             ┆            ┆        ┆ town @     │\n│      ┆           ┆             ┆            ┆   ┆             ┆            ┆        ┆ country …  │\n│ 23.0 ┆ 8         ┆ 350.0       ┆ 125.0      ┆ … ┆ 17.4        ┆ 79         ┆ usa    ┆ cadillac   │\n│      ┆           ┆             ┆            ┆   ┆             ┆            ┆        ┆ eldorado   │\n│ 44.3 ┆ 4         ┆ 90.0        ┆ 48.0       ┆ … ┆ 21.7        ┆ 80         ┆ europe ┆ vw rabbit  │\n│      ┆           ┆             ┆            ┆   ┆             ┆            ┆        ┆ c (diesel) │\n│ 43.4 ┆ 4         ┆ 90.0        ┆ 48.0       ┆ … ┆ 23.7        ┆ 80         ┆ europe ┆ vw dasher  │\n│      ┆           ┆             ┆            ┆   ┆             ┆            ┆        ┆ (diesel)   │\n│ 26.6 ┆ 8         ┆ 350.0       ┆ 105.0      ┆ … ┆ 19.0        ┆ 81         ┆ usa    ┆ oldsmobile │\n│      ┆           ┆             ┆            ┆   ┆             ┆            ┆        ┆ cutlass ls │\n└──────┴───────────┴─────────────┴────────────┴───┴─────────────┴────────────┴────────┴────────────┘\nError with the DataFrame passed to the check function:\n--&gt;Some values are beyond the acceptable ranges defined"
  },
  {
    "objectID": "notebooks/examples.html#investigating-the-cause-of-the-failure",
    "href": "notebooks/examples.html#investigating-the-cause-of-the-failure",
    "title": "Examples",
    "section": "Investigating the cause of the failure",
    "text": "Investigating the cause of the failure\nIn addition to help the user better understand the root cause of the check failure, the error object also possesses as df attribute that can contains the identified values causing the check to fail.\nHere is how to simply retrieve it without adding a try/except block. This allows us to print the error in a string format.\n\nimport sys\n\nerror = sys.last_value\n\nprint(error)\n\nYou can then manipulate a subset dataframe containing the elements that triggered the exception. Here we do a few manipulations to determine what are the values that are outside the specified boundaries as well as their relative importance within the dataset.\n\n(\n    pl.DataFrame(error.df)  # This is only here to obtain syntax highlighting\n    .select(pl.col(\"displacement\", \"horsepower\"))\n    .describe()\n)\n\n\nshape: (9, 3)\n\n\n\nstatistic\ndisplacement\nhorsepower\n\n\nstr\nf64\nf64\n\n\n\n\n\"count\"\n104.0\n104.0\n\n\n\"null_count\"\n0.0\n0.0\n\n\n\"mean\"\n334.221154\n154.278846\n\n\n\"std\"\n74.472899\n37.102968\n\n\n\"min\"\n68.0\n46.0\n\n\n\"25%\"\n305.0\n140.0\n\n\n\"50%\"\n350.0\n150.0\n\n\n\"75%\"\n360.0\n175.0\n\n\n\"max\"\n455.0\n230.0"
  },
  {
    "objectID": "notebooks/initial_readme.html#defensive-analysis",
    "href": "notebooks/initial_readme.html#defensive-analysis",
    "title": "Welcome to pelage!",
    "section": "Defensive analysis:",
    "text": "Defensive analysis:\nThe main idea of pelage is to leverage your possibility for defensive analysis, similarly to other python packages such as “bulwark” or “engarde”. However pelage rely mainly on possibility to directly pipe and chain transformations provided by the fantastic polars API rather than using decorators.\nAdditionally, some efforts have been put to have type hints for the provided functions in order to ensure full compatibility with your IDE across your chaining."
  },
  {
    "objectID": "notebooks/initial_readme.html#leveraging-polars-blazing-speed",
    "href": "notebooks/initial_readme.html#leveraging-polars-blazing-speed",
    "title": "Welcome to pelage!",
    "section": "Leveraging polars blazing speed:",
    "text": "Leveraging polars blazing speed:\nAlthough it is written in python most of pelage checks are written in a way that enable the polars API to work its magic. We try to use a syntax that is compatible with fast execution and parallelism provided by polars."
  },
  {
    "objectID": "notebooks/initial_readme.html#interoperability",
    "href": "notebooks/initial_readme.html#interoperability",
    "title": "Welcome to pelage!",
    "section": "Interoperability:",
    "text": "Interoperability:\nThe polars DSL and syntax have been develop with the idea to make the transition to SQL much easier. In this perspective, pelage wants to facilitate the use of tests to ensure data quality while enabling a possible transition towards SQL, and using the same tests in SQL. This is why we implemented most of the checks that have been developed for dbt tool box, notably:\n\ndbt generic checks\ndbt-utils tests\n(Soon to come: dbt expectations)\n\nWe believe that data quality checks should be written as close as possible to the data exploration phase, and we hope that providing theses checks in a context where it is easier to visualize your data will be helpful. Similarly, we know that it is sometimes much easier to industrialize SQL data pipelines, in this perspective the similarity between pelage and dbt testing capabilities should make the transition much smoother."
  },
  {
    "objectID": "notebooks/coming_from_dbt.html",
    "href": "notebooks/coming_from_dbt.html",
    "title": "dbt interoperability",
    "section": "",
    "text": "dbt interoperability\nOne of the primary objectives of pelage is to facilitate the rewriting of data pipelines from python to SQL, and the inverse. This is why most of the checks are based on the concept of SQL tests proposed by dbt.\n\ndbt core test functions\n\n\ndbt\nAvailable in pelage\ngroup_by option\n\n\n\n\nunique\n✅\n-\n\n\nnot_null\nhas_no_nulls ✅\n-\n\n\naccepted_values\n✅\n-\n\n\nrelationship\nmaintains_relationship ✅\n-\n\n\n\n\nImplementation of dbt-utils tests\n\n\n\n\n\n\n\ndbt-utils\nAvailable in pelage\ngroup_by option\n\n\n\n\nequal_rowcount\nhas_shape ✅\n✅\n\n\nfewer_rows_than\n❌\n❌\n\n\nequality\n✅\n-\n\n\nexpression_is_true\ncustom_check ✅\n-\n\n\nrecency\n❌\n❌\n\n\nat_least_one\n✅\n-\n\n\nnot_constant\n✅\n✅\n\n\nnot_empty_string\n❌\n❌\n\n\ncardinality_equality\n✅\n✅\n\n\nnot_null_proportion\n✅\n-\n\n\nnot_accepted_values\n✅\n-\n\n\nrelationships_where\n❌\n❌\n\n\nmutually_exclusive_ranges\n✅\n✅\n\n\nsequential_values\nis_monotonic ✅\n✅\n\n\nunique_combination_of_columns\n✅\n-\n\n\naccepted_range\n✅\n-\n\n\n\nSome functions that are also coming from other defensive analysis tools in python have been implemented, even though they are not available in dbt:\n\nOther defensive functions\n\n\nName\nAvailable in pelage\ngroup_by option\n\n\n\n\nhas_columns\n✅\n-\n\n\nhas_dtypes\n✅\n-\n\n\nhas_no_infs\n✅\n-\n\n\nhas_mandatory_values\n✅\n✅\n\n\n\n\n\nContext\npelage was designed in order to reduce the gap between data exploration and production. Working on data related use-cases implies facing many different challenges, one the majors are data quality, data drift.\n\nOne of the best frameworks to test data pipelines is provided by dbt.\nIt’s difficult to write tests after the business logic has been implemented.\nDuring EDA, data visualization plays a crucial role to identify relevant data or identify quality problems.\nSQL transformations are a major component of production-ready data pipelines."
  }
]